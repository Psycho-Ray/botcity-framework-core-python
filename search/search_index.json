{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome Welcome to BotCity's Framework Core Python package for RPA. Installation Latest release Using PyPI pip install botcity-framework-core Using conda-forge conda install -c conda-forge botcity-framework-core Latest code pip install git + https : // github . com / botcity - dev / botcity - framework - core - python . git","title":"Home"},{"location":"index.html#welcome","text":"Welcome to BotCity's Framework Core Python package for RPA.","title":"Welcome"},{"location":"index.html#installation","text":"","title":"Installation"},{"location":"index.html#latest-release","text":"","title":"Latest release"},{"location":"index.html#using-pypi","text":"pip install botcity-framework-core","title":"Using PyPI"},{"location":"index.html#using-conda-forge","text":"conda install -c conda-forge botcity-framework-core","title":"Using conda-forge"},{"location":"index.html#latest-code","text":"pip install git + https : // github . com / botcity - dev / botcity - framework - core - python . git","title":"Latest code"},{"location":"intro.html","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions to build your RPA pipeline. from botcity.core import * As a demonstration of the library, let's build a simple bot together that will open BotCity's website in your browser. Opening the browser To open the browser you can leverage the browser function which takes as argument a URL. browser ( \"https://www.botcity.dev/en\" ) You can use this framework in two ways: Scripting using the functions Creating a Bot class The second method is the best if you plan to integrate your bot with the BotCity Maestro SDK. The template project uses the Bot class and the examples cover both approaches. Template Project We created a template project using Cookiecutter to help you create new bots using BotCity's Python Framework. Take a look into the template project website for more information on how to use it and get started. Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"intro.html#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions to build your RPA pipeline. from botcity.core import * As a demonstration of the library, let's build a simple bot together that will open BotCity's website in your browser.","title":"Getting Started"},{"location":"intro.html#opening-the-browser","text":"To open the browser you can leverage the browser function which takes as argument a URL. browser ( \"https://www.botcity.dev/en\" ) You can use this framework in two ways: Scripting using the functions Creating a Bot class The second method is the best if you plan to integrate your bot with the BotCity Maestro SDK. The template project uses the Bot class and the examples cover both approaches.","title":"Opening the browser"},{"location":"intro.html#template-project","text":"We created a template project using Cookiecutter to help you create new bots using BotCity's Python Framework. Take a look into the template project website for more information on how to use it and get started.","title":"Template Project"},{"location":"intro.html#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"api/index.html","text":"API The API is divided into the following modules: display : this module contains search/find functions that interact with the display browser : this module contains functions that interact with the web browser mouse : this module contains functions that interact with the mouse keyboard : this module contains functions that interact with the keyboard misc : this module contains miscellaneous functions such as executing applications, and wait/print. bot : this module contains the base class for Bots, including the DesktopBot In order to make it easy for users, all modules are available via the core module. from botcity.core import * The following sections will describe each module in depth.","title":"API"},{"location":"api/index.html#api","text":"The API is divided into the following modules: display : this module contains search/find functions that interact with the display browser : this module contains functions that interact with the web browser mouse : this module contains functions that interact with the mouse keyboard : this module contains functions that interact with the keyboard misc : this module contains miscellaneous functions such as executing applications, and wait/print. bot : this module contains the base class for Bots, including the DesktopBot In order to make it easy for users, all modules are available via the core module. from botcity.core import * The following sections will describe each module in depth.","title":"API"},{"location":"api/bot.html","text":"Bot API This module containes the base class for all bots BaseBot but also specialized implementations such as DesktopBot which is described below. You are expected to implement the action method of the DesktopBot class in your Bot class. Here is a very brief example of a bot which opens the BotCity website: from botcity.core import DesktopBot class Bot ( DesktopBot ): def action ( self , execution ): # Opens the BotCity website. self . browse ( \"https://botcity.dev/en\" ) if __name__ == '__main__' : Bot . main () All functions from the API described below are accessible via the bot class as methods without the need to import any other module. E.g.: class Bot ( DesktopBot ): def action ( self , execution ): # using browse from browser module self . browse ( ... ) # using find from display module self . find ( ... ) # using mouse_move from mouse module self . mouse_move ( x = 100 , y = 200 ) # using enter from keyboard module self . enter () DesktopBot API botcity.core.bot.DesktopBot Base class for Desktop Bots. Users must implement the action method in their classes. Attributes: Name Type Description state State The internal state of this bot. maestro BotMaestroSDK an instance to interact with the BotMaestro server. action ( self , execution = None ) Execute an automation action. Parameters: Name Type Description Default execution BotExecution Information about the execution when running this bot in connection with the BotCity Maestro Orchestrator. None Source code in core/bot.py def action ( self , execution = None ): \"\"\" Execute an automation action. Args: execution (BotExecution, optional): Information about the execution when running this bot in connection with the BotCity Maestro Orchestrator. \"\"\" raise NotImplementedError ( \"You must implement this method.\" ) get_resource_abspath ( self , filename , resource_folder = 'resources' ) Compose the resource absolute path taking into account the package path. Parameters: Name Type Description Default filename str The filename under the resources folder. required resource_folder str The resource folder name. Defaults to resources . 'resources' Returns: Type Description abs_path (str) The absolute path to the file. Source code in core/bot.py def get_resource_abspath ( self , filename , resource_folder = \"resources\" ): \"\"\" Compose the resource absolute path taking into account the package path. Args: filename (str): The filename under the resources folder. resource_folder (str, optional): The resource folder name. Defaults to `resources`. Returns: abs_path (str): The absolute path to the file. \"\"\" return path . join ( self . _resources_path ( resource_folder ), filename )","title":"Bot"},{"location":"api/bot.html#bot-api","text":"This module containes the base class for all bots BaseBot but also specialized implementations such as DesktopBot which is described below. You are expected to implement the action method of the DesktopBot class in your Bot class. Here is a very brief example of a bot which opens the BotCity website: from botcity.core import DesktopBot class Bot ( DesktopBot ): def action ( self , execution ): # Opens the BotCity website. self . browse ( \"https://botcity.dev/en\" ) if __name__ == '__main__' : Bot . main () All functions from the API described below are accessible via the bot class as methods without the need to import any other module. E.g.: class Bot ( DesktopBot ): def action ( self , execution ): # using browse from browser module self . browse ( ... ) # using find from display module self . find ( ... ) # using mouse_move from mouse module self . mouse_move ( x = 100 , y = 200 ) # using enter from keyboard module self . enter ()","title":"Bot API"},{"location":"api/bot.html#desktopbot-api","text":"","title":"DesktopBot API"},{"location":"api/bot.html#botcity.core.bot.DesktopBot","text":"Base class for Desktop Bots. Users must implement the action method in their classes. Attributes: Name Type Description state State The internal state of this bot. maestro BotMaestroSDK an instance to interact with the BotMaestro server.","title":"DesktopBot"},{"location":"api/bot.html#botcity.core.bot.DesktopBot.action","text":"Execute an automation action. Parameters: Name Type Description Default execution BotExecution Information about the execution when running this bot in connection with the BotCity Maestro Orchestrator. None Source code in core/bot.py def action ( self , execution = None ): \"\"\" Execute an automation action. Args: execution (BotExecution, optional): Information about the execution when running this bot in connection with the BotCity Maestro Orchestrator. \"\"\" raise NotImplementedError ( \"You must implement this method.\" )","title":"action()"},{"location":"api/bot.html#botcity.core.bot.DesktopBot.get_resource_abspath","text":"Compose the resource absolute path taking into account the package path. Parameters: Name Type Description Default filename str The filename under the resources folder. required resource_folder str The resource folder name. Defaults to resources . 'resources' Returns: Type Description abs_path (str) The absolute path to the file. Source code in core/bot.py def get_resource_abspath ( self , filename , resource_folder = \"resources\" ): \"\"\" Compose the resource absolute path taking into account the package path. Args: filename (str): The filename under the resources folder. resource_folder (str, optional): The resource folder name. Defaults to `resources`. Returns: abs_path (str): The absolute path to the file. \"\"\" return path . join ( self . _resources_path ( resource_folder ), filename )","title":"get_resource_abspath()"},{"location":"api/browser.html","text":"Browser API Functions botcity.core.browser browse ( url , location = 0 ) Invoke the default browser passing an URL Parameters: Name Type Description Default url str The URL to be visited. required location int If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") 0 Returns: Type Description bool Whether or not the request was successful Source code in core/browser.py def browse ( url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status","title":"Browser"},{"location":"api/browser.html#browser-api","text":"","title":"Browser API"},{"location":"api/browser.html#functions","text":"","title":"Functions"},{"location":"api/browser.html#botcity.core.browser","text":"","title":"browser"},{"location":"api/browser.html#botcity.core.browser.browse","text":"Invoke the default browser passing an URL Parameters: Name Type Description Default url str The URL to be visited. required location int If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") 0 Returns: Type Description bool Whether or not the request was successful Source code in core/browser.py def browse ( url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status","title":"browse()"},{"location":"api/display.html","text":"Display API Functions botcity.core.display add_image ( label , path , * , state = None ) Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in core/display.py @ensure_state def add_image ( label , path , * , state = None ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" state . map_images [ label ] = path display_size () Returns the display size in pixels. Returns: Type Description size (Tuple) The screen dimension (width and height) in pixels. Source code in core/display.py def display_size (): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" screen_size = pyautogui . size () return screen_size . width , screen_size . height find ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in core/display.py @ensure_state def find_until ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" state . element = None screen_w , screen_h = pyautogui . size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = state . map_images [ label ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None ele = pyautogui . locateOnScreen ( element_path , region = region , confidence = matching , grayscale = grayscale ) if ele is not None : if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return ele find_multiple ( labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ) Find multiple elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default labels list A list of image identifiers required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description results (dict) A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. Source code in core/display.py @ensure_state def find_multiple ( labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = pyautogui . size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ state . map_images [ la ] for la in labels ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = pyautogui . screenshot () helper = functools . partial ( __find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ __fix_retina_element ( r ) for r in results ] if None in results : continue else : return _to_dict ( labels , results ) find_text ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , state = None ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in core/display.py @ensure_state def find_text ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , state = None ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True , state = state ) find_until ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in core/display.py @ensure_state def find_until ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" state . element = None screen_w , screen_h = pyautogui . size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = state . map_images [ label ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None ele = pyautogui . locateOnScreen ( element_path , region = region , confidence = matching , grayscale = grayscale ) if ele is not None : if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return ele get_element_coords ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True , * , state = None ) Find an element defined by label on screen and returns its coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the element. Source code in core/display.py @ensure_state def get_element_coords ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True , * , state = None ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" state . element = None screen_size = pyautogui . size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) ele = pyautogui . locateOnScreen ( state . map_images [ label ], region = region , confidence = matching ) if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return ele . left , ele . top get_element_coords_centered ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True , * , state = None ) Find an element defined by label on screen and returns its centered coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the center of the element. Source code in core/display.py @ensure_state def get_element_coords_centered ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True , * , state = None ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" get_element_coords ( label , x , y , width , height , matching , best , state = state ) return state . center () get_image_from_map ( label , * , state = None ) Return an image from teh state image map. Parameters: Name Type Description Default label str The image identifier required state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description Image The Image object Source code in core/display.py @ensure_state def get_image_from_map ( label , * , state = None ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: Image: The Image object \"\"\" path = state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img get_last_element ( * , state = None ) Return the last element found. Parameters: Name Type Description Default state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates (left, top, width, height) Source code in core/display.py @ensure_state def get_last_element ( * , state = None ): \"\"\" Return the last element found. Args: state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return state . element get_screenshot ( filepath = None , region = None ) Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in core/display.py def get_screenshot ( filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return screenshot ( filepath , region ) save_screenshot ( path ) Saves a screenshot in a given path. Parameters: Name Type Description Default path str The filepath in which to save the screenshot required Source code in core/display.py def save_screenshot ( path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" pyautogui . screenshot ( path ) screen_cut ( x , y , width = None , height = None ) Capture a screenshot from a region of the screen. Parameters: Name Type Description Default x int region start position x required y int region start position y required width int region width None height int region height None Returns: Type Description Image The screenshot Image object Source code in core/display.py def screen_cut ( x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_size = pyautogui . size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height img = pyautogui . screenshot ( region = ( x , y , width , height )) return img screenshot ( filepath = None , region = None ) Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in core/display.py def screenshot ( filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath , region ) return img","title":"Display"},{"location":"api/display.html#display-api","text":"","title":"Display API"},{"location":"api/display.html#functions","text":"","title":"Functions"},{"location":"api/display.html#botcity.core.display","text":"","title":"display"},{"location":"api/display.html#botcity.core.display.add_image","text":"Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in core/display.py @ensure_state def add_image ( label , path , * , state = None ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" state . map_images [ label ] = path","title":"add_image()"},{"location":"api/display.html#botcity.core.display.display_size","text":"Returns the display size in pixels. Returns: Type Description size (Tuple) The screen dimension (width and height) in pixels. Source code in core/display.py def display_size (): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" screen_size = pyautogui . size () return screen_size . width , screen_size . height","title":"display_size()"},{"location":"api/display.html#botcity.core.display.find","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in core/display.py @ensure_state def find_until ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" state . element = None screen_w , screen_h = pyautogui . size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = state . map_images [ label ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None ele = pyautogui . locateOnScreen ( element_path , region = region , confidence = matching , grayscale = grayscale ) if ele is not None : if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return ele","title":"find()"},{"location":"api/display.html#botcity.core.display.find_multiple","text":"Find multiple elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default labels list A list of image identifiers required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description results (dict) A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. Source code in core/display.py @ensure_state def find_multiple ( labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = pyautogui . size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ state . map_images [ la ] for la in labels ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = pyautogui . screenshot () helper = functools . partial ( __find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ __fix_retina_element ( r ) for r in results ] if None in results : continue else : return _to_dict ( labels , results )","title":"find_multiple()"},{"location":"api/display.html#botcity.core.display.find_text","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in core/display.py @ensure_state def find_text ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , state = None ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True , state = state )","title":"find_text()"},{"location":"api/display.html#botcity.core.display.find_until","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in core/display.py @ensure_state def find_until ( label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False , state = None ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" state . element = None screen_w , screen_h = pyautogui . size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = state . map_images [ label ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None ele = pyautogui . locateOnScreen ( element_path , region = region , confidence = matching , grayscale = grayscale ) if ele is not None : if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return ele","title":"find_until()"},{"location":"api/display.html#botcity.core.display.get_element_coords","text":"Find an element defined by label on screen and returns its coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the element. Source code in core/display.py @ensure_state def get_element_coords ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True , * , state = None ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" state . element = None screen_size = pyautogui . size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) ele = pyautogui . locateOnScreen ( state . map_images [ label ], region = region , confidence = matching ) if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return ele . left , ele . top","title":"get_element_coords()"},{"location":"api/display.html#botcity.core.display.get_element_coords_centered","text":"Find an element defined by label on screen and returns its centered coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the center of the element. Source code in core/display.py @ensure_state def get_element_coords_centered ( label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True , * , state = None ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" get_element_coords ( label , x , y , width , height , matching , best , state = state ) return state . center ()","title":"get_element_coords_centered()"},{"location":"api/display.html#botcity.core.display.get_image_from_map","text":"Return an image from teh state image map. Parameters: Name Type Description Default label str The image identifier required state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description Image The Image object Source code in core/display.py @ensure_state def get_image_from_map ( label , * , state = None ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: Image: The Image object \"\"\" path = state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img","title":"get_image_from_map()"},{"location":"api/display.html#botcity.core.display.get_last_element","text":"Return the last element found. Parameters: Name Type Description Default state State An instance of BaseState. If not provided, the singleton State is used. None Returns: Type Description element (NamedTuple) The element coordinates (left, top, width, height) Source code in core/display.py @ensure_state def get_last_element ( * , state = None ): \"\"\" Return the last element found. Args: state (State, optional): An instance of BaseState. If not provided, the singleton State is used. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return state . element","title":"get_last_element()"},{"location":"api/display.html#botcity.core.display.get_screenshot","text":"Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in core/display.py def get_screenshot ( filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return screenshot ( filepath , region )","title":"get_screenshot()"},{"location":"api/display.html#botcity.core.display.save_screenshot","text":"Saves a screenshot in a given path. Parameters: Name Type Description Default path str The filepath in which to save the screenshot required Source code in core/display.py def save_screenshot ( path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" pyautogui . screenshot ( path )","title":"save_screenshot()"},{"location":"api/display.html#botcity.core.display.screen_cut","text":"Capture a screenshot from a region of the screen. Parameters: Name Type Description Default x int region start position x required y int region start position y required width int region width None height int region height None Returns: Type Description Image The screenshot Image object Source code in core/display.py def screen_cut ( x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_size = pyautogui . size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height img = pyautogui . screenshot ( region = ( x , y , width , height )) return img","title":"screen_cut()"},{"location":"api/display.html#botcity.core.display.screenshot","text":"Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in core/display.py def screenshot ( filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath , region ) return img","title":"screenshot()"},{"location":"api/keyboard.html","text":"Keyboard API Functions botcity.core.keyboard alt_e ( wait = 0 ) Press keys Alt+E Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_e ( wait = 0 ): \"\"\" Press keys Alt+E Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+e' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) alt_f ( wait = 0 ) Press keys Alt+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_f ( wait = 0 ): \"\"\" Press keys Alt+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+f' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) alt_f4 ( wait = 0 ) Press keys Alt+F4 Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_f4 ( wait = 0 ): \"\"\" Press keys Alt+F4 Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+f4' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) alt_r ( wait = 0 ) Press keys Alt+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_r ( wait = 0 ): \"\"\" Press keys Alt+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+r' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) alt_space ( wait = 0 ) Press keys Alt+Space Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_space ( wait = 0 ): \"\"\" Press keys Alt+Space Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) alt_u ( wait = 0 ) Press keys Alt+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_u ( wait = 0 ): \"\"\" Press keys Alt+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+u' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) backspace ( wait = 0 ) Press Backspace key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def backspace ( wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'backspace' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_a ( wait = 0 ) Press keys CTRL+A Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_a ( wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +a' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_c ( wait = 0 ) Press keys CTRL+C Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_c ( wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +c' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_end ( wait = 0 ) Press keys CTRL+End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_end ( wait = 0 ): \"\"\" Press keys CTRL+End Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_f ( wait = 0 ) Press keys CTRL+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_f ( wait = 0 ): \"\"\" Press keys CTRL+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +f' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_home ( wait = 0 ) Press keys CTRL+Home Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_home ( wait = 0 ): \"\"\" Press keys CTRL+Home Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +home' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_p ( wait = 0 ) Press keys CTRL+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_p ( wait = 0 ): \"\"\" Press keys CTRL+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +p' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_r ( wait = 0 ) Press keys CTRL+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_r ( wait = 0 ): \"\"\" Press keys CTRL+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +r' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_shift_j ( wait = 0 ) Press keys CTRL+Shift+J Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_shift_j ( wait = 0 ): \"\"\" Press keys CTRL+Shift+J Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +shift+j' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_shift_p ( wait = 0 ) Press keys CTRL+Shift+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_shift_p ( wait = 0 ): \"\"\" Press keys CTRL+Shift+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +shift+p' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_t ( wait = 0 ) Press keys CTRL+T Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_t ( wait = 0 ): \"\"\" Press keys CTRL+T Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +t' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_u ( wait = 0 ) Press keys CTRL+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_u ( wait = 0 ): \"\"\" Press keys CTRL+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +u' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_v ( wait = 0 ) Press keys CTRL+V Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_v ( wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +v' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) control_w ( wait = 0 ) Press keys CTRL+W Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_w ( wait = 0 ): \"\"\" Press keys CTRL+W Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +w' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) copy_to_clipboard ( text , wait = 0 ) Copy content to the clipboard. Parameters: Name Type Description Default text str The text to be copied. required wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def copy_to_clipboard ( text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) delete ( wait = 0 ) Press Delete key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def delete ( wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'del' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) enter ( wait = 0 ) Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def enter ( wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'enter' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) get_clipboard () Get the current content in the clipboard. Returns: Type Description text (str) Current clipboard content Source code in core/keyboard.py def get_clipboard (): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" return pyperclip . paste () hold_shift ( wait = 0 ) Hold key Shift Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def hold_shift ( wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . press ( 'shift' ) sleep ( wait ) kb_type ( text , interval = 0 ) Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in core/keyboard.py def kb_type ( text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" kb . write ( text , delay = interval / 1000.0 ) sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) key_end ( wait = 0 ) Press key End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_end ( wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) key_enter ( wait = 0 ) Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_enter ( wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" enter ( wait ) key_esc ( wait = 0 ) Press key Esc Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_esc ( wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'esc' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) key_right ( wait = 0 ) Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_right ( wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) maximize_window () Shortcut to maximize window on Windows OS. Source code in core/keyboard.py def maximize_window (): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" alt_space () sleep ( 1000 ) kb . send ( 'x' ) paste ( text = None , wait = 0 ) Paste content from the clipboard. Parameters: Name Type Description Default text str The text to be pasted. Defaults to None None wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def paste ( text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : pyperclip . copy ( text ) sleep ( 500 ) control_v () delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) release_shift () Release key Shift. This method needs to be invoked after holding Shift or similar. Source code in core/keyboard.py def release_shift (): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" kb . release ( 'shift' ) shift_tab ( wait = 0 ) Press keys Shift+Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def shift_tab ( wait = 0 ): \"\"\" Press keys Shift+Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'shift+tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) space ( wait = 0 ) Press Space key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def space ( wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) tab ( wait = 0 ) Press key Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def tab ( wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) type_down ( wait = 0 ) Press Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_down ( wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'down' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) type_key ( text , interval = 0 ) Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in core/keyboard.py def kb_type ( text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" kb . write ( text , delay = interval / 1000.0 ) sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) type_keys ( keys ) Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default keys list List of keys to be pressed required Source code in core/keyboard.py def type_keys ( keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" type_keys_with_interval ( 100 , keys ) type_keys_with_interval ( interval , keys ) Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default interval int Interval (ms) in which to press and release keys required keys list List of keys to be pressed required Source code in core/keyboard.py def type_keys_with_interval ( interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" for k in keys : kb . press ( k ) sleep ( interval ) for k in keys . reverse (): kb . release ( k ) sleep ( interval ) type_left ( wait = 0 ) Press Left key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_left ( wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'left' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) type_right ( wait = 0 ) Press Right key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_right ( wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) type_up ( wait = 0 ) Press Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_up ( wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'up' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay ) type_windows ( wait = 0 ) Press Win logo key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_windows ( wait = 0 ): \"\"\" Press Win logo key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'windows' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"Keyboard"},{"location":"api/keyboard.html#keyboard-api","text":"","title":"Keyboard API"},{"location":"api/keyboard.html#functions","text":"","title":"Functions"},{"location":"api/keyboard.html#botcity.core.keyboard","text":"","title":"keyboard"},{"location":"api/keyboard.html#botcity.core.keyboard.alt_e","text":"Press keys Alt+E Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_e ( wait = 0 ): \"\"\" Press keys Alt+E Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+e' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"alt_e()"},{"location":"api/keyboard.html#botcity.core.keyboard.alt_f","text":"Press keys Alt+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_f ( wait = 0 ): \"\"\" Press keys Alt+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+f' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"alt_f()"},{"location":"api/keyboard.html#botcity.core.keyboard.alt_f4","text":"Press keys Alt+F4 Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_f4 ( wait = 0 ): \"\"\" Press keys Alt+F4 Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+f4' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"alt_f4()"},{"location":"api/keyboard.html#botcity.core.keyboard.alt_r","text":"Press keys Alt+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_r ( wait = 0 ): \"\"\" Press keys Alt+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+r' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"alt_r()"},{"location":"api/keyboard.html#botcity.core.keyboard.alt_space","text":"Press keys Alt+Space Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_space ( wait = 0 ): \"\"\" Press keys Alt+Space Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"alt_space()"},{"location":"api/keyboard.html#botcity.core.keyboard.alt_u","text":"Press keys Alt+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def alt_u ( wait = 0 ): \"\"\" Press keys Alt+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'alt+u' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"alt_u()"},{"location":"api/keyboard.html#botcity.core.keyboard.backspace","text":"Press Backspace key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def backspace ( wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'backspace' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"backspace()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_a","text":"Press keys CTRL+A Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_a ( wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +a' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_a()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_c","text":"Press keys CTRL+C Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_c ( wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +c' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_c()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_end","text":"Press keys CTRL+End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_end ( wait = 0 ): \"\"\" Press keys CTRL+End Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_end()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_f","text":"Press keys CTRL+F Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_f ( wait = 0 ): \"\"\" Press keys CTRL+F Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +f' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_f()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_home","text":"Press keys CTRL+Home Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_home ( wait = 0 ): \"\"\" Press keys CTRL+Home Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +home' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_home()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_p","text":"Press keys CTRL+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_p ( wait = 0 ): \"\"\" Press keys CTRL+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +p' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_p()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_r","text":"Press keys CTRL+R Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_r ( wait = 0 ): \"\"\" Press keys CTRL+R Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +r' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_r()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_shift_j","text":"Press keys CTRL+Shift+J Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_shift_j ( wait = 0 ): \"\"\" Press keys CTRL+Shift+J Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +shift+j' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_shift_j()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_shift_p","text":"Press keys CTRL+Shift+P Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_shift_p ( wait = 0 ): \"\"\" Press keys CTRL+Shift+P Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +shift+p' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_shift_p()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_t","text":"Press keys CTRL+T Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_t ( wait = 0 ): \"\"\" Press keys CTRL+T Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +t' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_t()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_u","text":"Press keys CTRL+U Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_u ( wait = 0 ): \"\"\" Press keys CTRL+U Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +u' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_u()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_v","text":"Press keys CTRL+V Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_v ( wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +v' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_v()"},{"location":"api/keyboard.html#botcity.core.keyboard.control_w","text":"Press keys CTRL+W Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def control_w ( wait = 0 ): \"\"\" Press keys CTRL+W Args: wait (int, optional): Wait interval (ms) after task \"\"\" key = 'ctrl' if platform . system () == 'Darwin' : key = 'command' kb . send ( f ' { key } +w' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"control_w()"},{"location":"api/keyboard.html#botcity.core.keyboard.copy_to_clipboard","text":"Copy content to the clipboard. Parameters: Name Type Description Default text str The text to be copied. required wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def copy_to_clipboard ( text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"copy_to_clipboard()"},{"location":"api/keyboard.html#botcity.core.keyboard.delete","text":"Press Delete key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def delete ( wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'del' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"delete()"},{"location":"api/keyboard.html#botcity.core.keyboard.enter","text":"Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def enter ( wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'enter' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"enter()"},{"location":"api/keyboard.html#botcity.core.keyboard.get_clipboard","text":"Get the current content in the clipboard. Returns: Type Description text (str) Current clipboard content Source code in core/keyboard.py def get_clipboard (): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" return pyperclip . paste ()","title":"get_clipboard()"},{"location":"api/keyboard.html#botcity.core.keyboard.hold_shift","text":"Hold key Shift Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def hold_shift ( wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . press ( 'shift' ) sleep ( wait )","title":"hold_shift()"},{"location":"api/keyboard.html#botcity.core.keyboard.kb_type","text":"Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in core/keyboard.py def kb_type ( text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" kb . write ( text , delay = interval / 1000.0 ) sleep ( config . DEFAULT_SLEEP_AFTER_ACTION )","title":"kb_type()"},{"location":"api/keyboard.html#botcity.core.keyboard.key_end","text":"Press key End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_end ( wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'end' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"key_end()"},{"location":"api/keyboard.html#botcity.core.keyboard.key_enter","text":"Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_enter ( wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" enter ( wait )","title":"key_enter()"},{"location":"api/keyboard.html#botcity.core.keyboard.key_esc","text":"Press key Esc Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_esc ( wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'esc' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"key_esc()"},{"location":"api/keyboard.html#botcity.core.keyboard.key_right","text":"Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def key_right ( wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"key_right()"},{"location":"api/keyboard.html#botcity.core.keyboard.maximize_window","text":"Shortcut to maximize window on Windows OS. Source code in core/keyboard.py def maximize_window (): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" alt_space () sleep ( 1000 ) kb . send ( 'x' )","title":"maximize_window()"},{"location":"api/keyboard.html#botcity.core.keyboard.paste","text":"Paste content from the clipboard. Parameters: Name Type Description Default text str The text to be pasted. Defaults to None None wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def paste ( text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : pyperclip . copy ( text ) sleep ( 500 ) control_v () delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"paste()"},{"location":"api/keyboard.html#botcity.core.keyboard.release_shift","text":"Release key Shift. This method needs to be invoked after holding Shift or similar. Source code in core/keyboard.py def release_shift (): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" kb . release ( 'shift' )","title":"release_shift()"},{"location":"api/keyboard.html#botcity.core.keyboard.shift_tab","text":"Press keys Shift+Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def shift_tab ( wait = 0 ): \"\"\" Press keys Shift+Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'shift+tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"shift_tab()"},{"location":"api/keyboard.html#botcity.core.keyboard.space","text":"Press Space key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def space ( wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'space' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"space()"},{"location":"api/keyboard.html#botcity.core.keyboard.tab","text":"Press key Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def tab ( wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'tab' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"tab()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_down","text":"Press Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_down ( wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'down' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"type_down()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_key","text":"Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in core/keyboard.py def kb_type ( text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" kb . write ( text , delay = interval / 1000.0 ) sleep ( config . DEFAULT_SLEEP_AFTER_ACTION )","title":"type_key()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_keys","text":"Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default keys list List of keys to be pressed required Source code in core/keyboard.py def type_keys ( keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" type_keys_with_interval ( 100 , keys )","title":"type_keys()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_keys_with_interval","text":"Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default interval int Interval (ms) in which to press and release keys required keys list List of keys to be pressed required Source code in core/keyboard.py def type_keys_with_interval ( interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" for k in keys : kb . press ( k ) sleep ( interval ) for k in keys . reverse (): kb . release ( k ) sleep ( interval )","title":"type_keys_with_interval()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_left","text":"Press Left key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_left ( wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'left' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"type_left()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_right","text":"Press Right key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_right ( wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'right' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"type_right()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_up","text":"Press Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_up ( wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'up' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"type_up()"},{"location":"api/keyboard.html#botcity.core.keyboard.type_windows","text":"Press Win logo key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in core/keyboard.py def type_windows ( wait = 0 ): \"\"\" Press Win logo key Args: wait (int, optional): Wait interval (ms) after task \"\"\" kb . send ( 'windows' ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) sleep ( delay )","title":"type_windows()"},{"location":"api/misc.html","text":"Miscellaneous API Functions botcity.core.misc execute ( file_path ) Invoke the system handler to open the given file. Parameters: Name Type Description Default file_path str The path for the file to be executed required Source code in core/misc.py def execute ( file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" os . startfile ( file_path ) sleep ( interval ) Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in core/misc.py def wait ( interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 ) wait ( interval ) Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in core/misc.py def wait ( interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 )","title":"Misc"},{"location":"api/misc.html#miscellaneous-api","text":"","title":"Miscellaneous API"},{"location":"api/misc.html#functions","text":"","title":"Functions"},{"location":"api/misc.html#botcity.core.misc","text":"","title":"misc"},{"location":"api/misc.html#botcity.core.misc.execute","text":"Invoke the system handler to open the given file. Parameters: Name Type Description Default file_path str The path for the file to be executed required Source code in core/misc.py def execute ( file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" os . startfile ( file_path )","title":"execute()"},{"location":"api/misc.html#botcity.core.misc.sleep","text":"Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in core/misc.py def wait ( interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 )","title":"sleep()"},{"location":"api/misc.html#botcity.core.misc.wait","text":"Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in core/misc.py def wait ( interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 )","title":"wait()"},{"location":"api/mouse.html","text":"Mouse API Functions botcity.core.mouse click ( wait_after = 300 , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' , state ) Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' , state ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .misc import sleep x , y = state . center () pyautogui . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks ) sleep ( wait_after ) click_at ( x , y ) Click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in core/mouse.py def click_at ( x , y ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . click ( x , y ) click_on ( label , * , state = None ) Click on the element. Parameters: Name Type Description Default label str The image identifier required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in core/mouse.py @ensure_state @only_if_element def click_on ( label , * , state = None ): \"\"\" Click on the element. Args: label (str): The image identifier state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .display import get_element_coords_centered x , y = get_element_coords_centered ( label , state = state ) pyautogui . click ( x , y ) click_relative ( x , y , wait_after = 300 , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' , state ) Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def click_relative ( x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' , state ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .misc import sleep x = state . x () + x y = state . y () + y pyautogui . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks ) sleep ( wait_after ) double_click ( wait_after = 300 , * , state ) Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def double_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () click ( x , y , wait_after = wait_after , click = 2 ) double_click_relative ( x , y , interval_between_clicks = 0 , wait_after = 300 , * , state ) Double Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def double_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x = state . x () + x y = state . y () + y click_relative ( x , y , wait_after = wait_after , click = 2 , interval_between_clicks = interval_between_clicks ) doubleclick ( wait_after = 300 , * , state ) Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def double_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () click ( x , y , wait_after = wait_after , click = 2 ) get_last_x () Get the last X position for the mouse. Returns: Type Description x (int) The last x position for the mouse. Source code in core/mouse.py @ensure_state def get_last_x (): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return pyautogui . position () . x get_last_y () Get the last Y position for the mouse. Returns: Type Description y (int) The last y position for the mouse. Source code in core/mouse.py def get_last_y (): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return pyautogui . position () . y mouse_move ( x , y ) Mouse the move to the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in core/mouse.py def mouse_move ( x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . moveTo ( x , y ) move ( * , state ) Move to the center position of last found item. Parameters: Name Type Description Default state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def move ( * , state ): \"\"\" Move to the center position of last found item. Args: state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () pyautogui . moveTo ( x , y ) move_random ( range_x , range_y ) Move randomly along the given x, y range. Parameters: Name Type Description Default range_x int Horizontal range required range_y int Vertical range required Source code in core/mouse.py def move_random ( range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) pyautogui . moveTo ( x , y ) move_relative ( x , y ) Move the mouse relative to its current position. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required Source code in core/mouse.py def move_relative ( x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = get_last_x () + x y = get_last_y () + y pyautogui . moveTo ( x , y ) right_click ( wait_after = 300 , * , clicks = 1 , interval_between_clicks = 0 , state ) Right click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def right_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , state ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .misc import sleep x , y = state . center () pyautogui . click ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks ) sleep ( wait_after ) right_click_at ( x , y ) Right click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in core/mouse.py def right_click_at ( x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . click ( x , y , button = 'right' ) right_click_relative ( x , y , interval_between_clicks = 0 , wait_after = 300 , * , state ) Right Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def right_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x = state . x () + x y = state . y () + y click_relative ( x , y , wait_after = wait_after , click = 3 , interval_between_clicks = interval_between_clicks , button = 'right' ) scroll_down ( clicks ) Scroll Down n clicks Parameters: Name Type Description Default clicks int Number of times to scroll down. required Source code in core/mouse.py def scroll_down ( clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" pyautogui . scroll ( - 1 * clicks ) scroll_up ( clicks ) Scroll Up n clicks Parameters: Name Type Description Default clicks int Number of times to scroll up. required Source code in core/mouse.py def scroll_up ( clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" pyautogui . scroll ( clicks ) triple_click ( wait_after = 300 , * , state ) Triple Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def triple_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () click ( x , y , wait_after = wait_after , click = 3 ) triple_click_relative ( x , y , interval_between_clicks = 0 , wait_after = 300 , * , state ) Triple Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def triple_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x = state . x () + x y = state . y () + y click_relative ( x , y , wait_after = wait_after , click = 3 , interval_between_clicks = interval_between_clicks )","title":"Mouse"},{"location":"api/mouse.html#mouse-api","text":"","title":"Mouse API"},{"location":"api/mouse.html#functions","text":"","title":"Functions"},{"location":"api/mouse.html#botcity.core.mouse","text":"","title":"mouse"},{"location":"api/mouse.html#botcity.core.mouse.click","text":"Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' , state ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .misc import sleep x , y = state . center () pyautogui . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks ) sleep ( wait_after )","title":"click()"},{"location":"api/mouse.html#botcity.core.mouse.click_at","text":"Click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in core/mouse.py def click_at ( x , y ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . click ( x , y )","title":"click_at()"},{"location":"api/mouse.html#botcity.core.mouse.click_on","text":"Click on the element. Parameters: Name Type Description Default label str The image identifier required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in core/mouse.py @ensure_state @only_if_element def click_on ( label , * , state = None ): \"\"\" Click on the element. Args: label (str): The image identifier state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .display import get_element_coords_centered x , y = get_element_coords_centered ( label , state = state ) pyautogui . click ( x , y )","title":"click_on()"},{"location":"api/mouse.html#botcity.core.mouse.click_relative","text":"Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def click_relative ( x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' , state ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .misc import sleep x = state . x () + x y = state . y () + y pyautogui . click ( x , y , clicks = clicks , button = button , interval = interval_between_clicks ) sleep ( wait_after )","title":"click_relative()"},{"location":"api/mouse.html#botcity.core.mouse.double_click","text":"Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def double_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () click ( x , y , wait_after = wait_after , click = 2 )","title":"double_click()"},{"location":"api/mouse.html#botcity.core.mouse.double_click_relative","text":"Double Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def double_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x = state . x () + x y = state . y () + y click_relative ( x , y , wait_after = wait_after , click = 2 , interval_between_clicks = interval_between_clicks )","title":"double_click_relative()"},{"location":"api/mouse.html#botcity.core.mouse.doubleclick","text":"Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def double_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () click ( x , y , wait_after = wait_after , click = 2 )","title":"doubleclick()"},{"location":"api/mouse.html#botcity.core.mouse.get_last_x","text":"Get the last X position for the mouse. Returns: Type Description x (int) The last x position for the mouse. Source code in core/mouse.py @ensure_state def get_last_x (): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return pyautogui . position () . x","title":"get_last_x()"},{"location":"api/mouse.html#botcity.core.mouse.get_last_y","text":"Get the last Y position for the mouse. Returns: Type Description y (int) The last y position for the mouse. Source code in core/mouse.py def get_last_y (): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return pyautogui . position () . y","title":"get_last_y()"},{"location":"api/mouse.html#botcity.core.mouse.mouse_move","text":"Mouse the move to the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in core/mouse.py def mouse_move ( x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . moveTo ( x , y )","title":"mouse_move()"},{"location":"api/mouse.html#botcity.core.mouse.move","text":"Move to the center position of last found item. Parameters: Name Type Description Default state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def move ( * , state ): \"\"\" Move to the center position of last found item. Args: state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () pyautogui . moveTo ( x , y )","title":"move()"},{"location":"api/mouse.html#botcity.core.mouse.move_random","text":"Move randomly along the given x, y range. Parameters: Name Type Description Default range_x int Horizontal range required range_y int Vertical range required Source code in core/mouse.py def move_random ( range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) pyautogui . moveTo ( x , y )","title":"move_random()"},{"location":"api/mouse.html#botcity.core.mouse.move_relative","text":"Move the mouse relative to its current position. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required Source code in core/mouse.py def move_relative ( x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = get_last_x () + x y = get_last_y () + y pyautogui . moveTo ( x , y )","title":"move_relative()"},{"location":"api/mouse.html#botcity.core.mouse.right_click","text":"Right click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def right_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , state ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" from .misc import sleep x , y = state . center () pyautogui . click ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks ) sleep ( wait_after )","title":"right_click()"},{"location":"api/mouse.html#botcity.core.mouse.right_click_at","text":"Right click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in core/mouse.py def right_click_at ( x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" pyautogui . click ( x , y , button = 'right' )","title":"right_click_at()"},{"location":"api/mouse.html#botcity.core.mouse.right_click_relative","text":"Right Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def right_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x = state . x () + x y = state . y () + y click_relative ( x , y , wait_after = wait_after , click = 3 , interval_between_clicks = interval_between_clicks , button = 'right' )","title":"right_click_relative()"},{"location":"api/mouse.html#botcity.core.mouse.scroll_down","text":"Scroll Down n clicks Parameters: Name Type Description Default clicks int Number of times to scroll down. required Source code in core/mouse.py def scroll_down ( clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" pyautogui . scroll ( - 1 * clicks )","title":"scroll_down()"},{"location":"api/mouse.html#botcity.core.mouse.scroll_up","text":"Scroll Up n clicks Parameters: Name Type Description Default clicks int Number of times to scroll up. required Source code in core/mouse.py def scroll_up ( clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" pyautogui . scroll ( clicks )","title":"scroll_up()"},{"location":"api/mouse.html#botcity.core.mouse.triple_click","text":"Triple Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def triple_click ( wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x , y = state . center () click ( x , y , wait_after = wait_after , click = 3 )","title":"triple_click()"},{"location":"api/mouse.html#botcity.core.mouse.triple_click_relative","text":"Triple Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 state State An instance of BaseState. If not provided, the singleton State is used. required Source code in core/mouse.py @ensure_state @only_if_element def triple_click_relative ( x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , state ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" x = state . x () + x y = state . y () + y click_relative ( x , y , wait_after = wait_after , click = 3 , interval_between_clicks = interval_between_clicks )","title":"triple_click_relative()"}]}