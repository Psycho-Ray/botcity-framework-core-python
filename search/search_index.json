{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BotCity - Python Framework Welcome to BotCity's Python package for RPA. Installation Latest release Using PyPI pip install botcity Using conda-forge conda install -c conda-forge botcity Latest code pip install git+https://github.com/hhslepicka/botcity-python.git","title":"Home"},{"location":"#botcity-python-framework","text":"Welcome to BotCity's Python package for RPA.","title":"BotCity - Python Framework"},{"location":"#installation","text":"","title":"Installation"},{"location":"#latest-release","text":"","title":"Latest release"},{"location":"#using-pypi","text":"pip install botcity","title":"Using PyPI"},{"location":"#using-conda-forge","text":"conda install -c conda-forge botcity","title":"Using conda-forge"},{"location":"#latest-code","text":"pip install git+https://github.com/hhslepicka/botcity-python.git","title":"Latest code"},{"location":"api/","text":"BotCity API Core Functions Here we document the core functions that can be used to build your RPA pipeline. botcity.core add_image ( label , path , * , state = None ) Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def add_image ( label , path , * , state = None ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" state . map_images [ label ] = path addImage ( label , path , * , state = None ) Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def add_image ( label , path , * , state = None ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" state . map_images [ label ] = path browse ( url , location = 0 ) Invoke the default browser passing an URL Parameters: Name Type Description Default url str The URL to be visited. required location int If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") 0 Returns: Type Description bool Whether or not the request was successful Source code in botcity/core.py def browse ( url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status click ( * , state = None ) Click on the element. Parameters: Name Type Description Default state State An instance of BaseState. If not provided, the singleton State is used. None **kwargs Arbitrary keyword arguments that are forwarded to lower level find function. required Source code in botcity/core.py @only_if_element @ensure_state def click ( * , state = None ): \"\"\" Click on the element. Args: state (State, optional): An instance of BaseState. If not provided, the singleton State is used. **kwargs: Arbitrary keyword arguments that are forwarded to lower level find function. \"\"\" pyautogui . click ( state . element . left , state . element . top ) click_relative ( x , y , * , state = None ) Click relative to the element. Parameters: Name Type Description Default x int, float The relative distance for the X axis required y int, float The relative distance for the Y axis required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def click_relative ( x , y , * , state = None ): \"\"\" Click relative to the element. Args: x (int, float): The relative distance for the X axis y (int, float): The relative distance for the Y axis state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" pyautogui . click ( state . element . left + x , state . element . top + y ) clickRelative ( x , y , * , state = None ) Click relative to the element. Parameters: Name Type Description Default x int, float The relative distance for the X axis required y int, float The relative distance for the Y axis required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def click_relative ( x , y , * , state = None ): \"\"\" Click relative to the element. Args: x (int, float): The relative distance for the X axis y (int, float): The relative distance for the Y axis state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" pyautogui . click ( state . element . left + x , state . element . top + y ) enter () Emulate Enter keypress. Source code in botcity/core.py def enter (): \"\"\" Emulate Enter keypress. \"\"\" pyautogui . press ( \"enter\" ) execute ( file_path ) Invoke the system handler to open the given file. Parameters: Name Type Description Default file_path str The path for the file to be executed required Source code in botcity/core.py def execute ( file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" os . startfile ( file_path ) find ( label , * , state = None , ** kwargs ) Find an element defined by label on screen. Parameters: Name Type Description Default label str The image identifier required state State An instance of BaseState. If not provided, the singleton State is used. None **kwargs Arbitrary keyword arguments that are forwarded to lower level find function. {} Returns: Type Description element (NamedTuple) The element coordinates Source code in botcity/core.py @ensure_state def find ( label , * , state = None , ** kwargs ): \"\"\" Find an element defined by label on screen. Args: label (str): The image identifier state (State, optional): An instance of BaseState. If not provided, the singleton State is used. **kwargs: Arbitrary keyword arguments that are forwarded to lower level find function. Returns: element (NamedTuple): The element coordinates \"\"\" ele = pyautogui . locateOnScreen ( state . map_images [ label ], ** kwargs ) if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return state . element screenshot ( filepath = '' ) Capture a screenshot and save it to a file if filepath is informed. Parameters: Name Type Description Default filepath str Filepath for the screenshot file. '' Returns: Type Description Image The screenshot Image object Source code in botcity/core.py def screenshot ( filepath = \"\" ): \"\"\" Capture a screenshot and save it to a file if filepath is informed. Args: filepath (str): Filepath for the screenshot file. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath ) return img sleep ( interval ) Delay execution for a given amount of seconds. Parameters: Name Type Description Default interval float The interval for the delay. Use float for subsecond precision. required Source code in botcity/core.py def sleep ( interval ): \"\"\" Delay execution for a given amount of seconds. Args: interval (float): The interval for the delay. Use float for subsecond precision. \"\"\" time . sleep ( interval ) tab () Emulate Tab keypress. Source code in botcity/core.py def tab (): \"\"\" Emulate Tab keypress. \"\"\" pyautogui . press ( \"tab\" ) type_text ( text ) Emulate the typing of the given text. Parameters: Name Type Description Default text str The text to be typed required Source code in botcity/core.py def type_text ( text ): \"\"\" Emulate the typing of the given text. Args: text (str): The text to be typed \"\"\" pyautogui . typewrite ( text ) typeText ( text ) Emulate the typing of the given text. Parameters: Name Type Description Default text str The text to be typed required Source code in botcity/core.py def type_text ( text ): \"\"\" Emulate the typing of the given text. Args: text (str): The text to be typed \"\"\" pyautogui . typewrite ( text )","title":"API"},{"location":"api/#botcity-api","text":"","title":"BotCity API"},{"location":"api/#core-functions","text":"Here we document the core functions that can be used to build your RPA pipeline.","title":"Core Functions"},{"location":"api/#botcity.core","text":"","title":"core"},{"location":"api/#botcity.core.add_image","text":"Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def add_image ( label , path , * , state = None ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" state . map_images [ label ] = path","title":"add_image()"},{"location":"api/#botcity.core.addImage","text":"Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def add_image ( label , path , * , state = None ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" state . map_images [ label ] = path","title":"addImage()"},{"location":"api/#botcity.core.browse","text":"Invoke the default browser passing an URL Parameters: Name Type Description Default url str The URL to be visited. required location int If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") 0 Returns: Type Description bool Whether or not the request was successful Source code in botcity/core.py def browse ( url , location = 0 ): \"\"\" Invoke the default browser passing an URL Args: url (str): The URL to be visited. location (int): If possible, open url in a location determined by new: * 0: the same browser window (the default) * 1: a new browser window * 2: a new browser page (\"tab\") Returns: bool: Whether or not the request was successful \"\"\" status = webbrowser . open ( url , location ) return status","title":"browse()"},{"location":"api/#botcity.core.click","text":"Click on the element. Parameters: Name Type Description Default state State An instance of BaseState. If not provided, the singleton State is used. None **kwargs Arbitrary keyword arguments that are forwarded to lower level find function. required Source code in botcity/core.py @only_if_element @ensure_state def click ( * , state = None ): \"\"\" Click on the element. Args: state (State, optional): An instance of BaseState. If not provided, the singleton State is used. **kwargs: Arbitrary keyword arguments that are forwarded to lower level find function. \"\"\" pyautogui . click ( state . element . left , state . element . top )","title":"click()"},{"location":"api/#botcity.core.click_relative","text":"Click relative to the element. Parameters: Name Type Description Default x int, float The relative distance for the X axis required y int, float The relative distance for the Y axis required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def click_relative ( x , y , * , state = None ): \"\"\" Click relative to the element. Args: x (int, float): The relative distance for the X axis y (int, float): The relative distance for the Y axis state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" pyautogui . click ( state . element . left + x , state . element . top + y )","title":"click_relative()"},{"location":"api/#botcity.core.clickRelative","text":"Click relative to the element. Parameters: Name Type Description Default x int, float The relative distance for the X axis required y int, float The relative distance for the Y axis required state State An instance of BaseState. If not provided, the singleton State is used. None Source code in botcity/core.py @ensure_state def click_relative ( x , y , * , state = None ): \"\"\" Click relative to the element. Args: x (int, float): The relative distance for the X axis y (int, float): The relative distance for the Y axis state (State, optional): An instance of BaseState. If not provided, the singleton State is used. \"\"\" pyautogui . click ( state . element . left + x , state . element . top + y )","title":"clickRelative()"},{"location":"api/#botcity.core.enter","text":"Emulate Enter keypress. Source code in botcity/core.py def enter (): \"\"\" Emulate Enter keypress. \"\"\" pyautogui . press ( \"enter\" )","title":"enter()"},{"location":"api/#botcity.core.execute","text":"Invoke the system handler to open the given file. Parameters: Name Type Description Default file_path str The path for the file to be executed required Source code in botcity/core.py def execute ( file_path ): \"\"\" Invoke the system handler to open the given file. Args: file_path (str): The path for the file to be executed \"\"\" os . startfile ( file_path )","title":"execute()"},{"location":"api/#botcity.core.find","text":"Find an element defined by label on screen. Parameters: Name Type Description Default label str The image identifier required state State An instance of BaseState. If not provided, the singleton State is used. None **kwargs Arbitrary keyword arguments that are forwarded to lower level find function. {} Returns: Type Description element (NamedTuple) The element coordinates Source code in botcity/core.py @ensure_state def find ( label , * , state = None , ** kwargs ): \"\"\" Find an element defined by label on screen. Args: label (str): The image identifier state (State, optional): An instance of BaseState. If not provided, the singleton State is used. **kwargs: Arbitrary keyword arguments that are forwarded to lower level find function. Returns: element (NamedTuple): The element coordinates \"\"\" ele = pyautogui . locateOnScreen ( state . map_images [ label ], ** kwargs ) if is_retina (): ele = ele . _replace ( left = ele . left / 2.0 , top = ele . top / 2.0 ) state . element = ele return state . element","title":"find()"},{"location":"api/#botcity.core.screenshot","text":"Capture a screenshot and save it to a file if filepath is informed. Parameters: Name Type Description Default filepath str Filepath for the screenshot file. '' Returns: Type Description Image The screenshot Image object Source code in botcity/core.py def screenshot ( filepath = \"\" ): \"\"\" Capture a screenshot and save it to a file if filepath is informed. Args: filepath (str): Filepath for the screenshot file. Returns: Image: The screenshot Image object \"\"\" img = pyautogui . screenshot ( filepath ) return img","title":"screenshot()"},{"location":"api/#botcity.core.sleep","text":"Delay execution for a given amount of seconds. Parameters: Name Type Description Default interval float The interval for the delay. Use float for subsecond precision. required Source code in botcity/core.py def sleep ( interval ): \"\"\" Delay execution for a given amount of seconds. Args: interval (float): The interval for the delay. Use float for subsecond precision. \"\"\" time . sleep ( interval )","title":"sleep()"},{"location":"api/#botcity.core.tab","text":"Emulate Tab keypress. Source code in botcity/core.py def tab (): \"\"\" Emulate Tab keypress. \"\"\" pyautogui . press ( \"tab\" )","title":"tab()"},{"location":"api/#botcity.core.type_text","text":"Emulate the typing of the given text. Parameters: Name Type Description Default text str The text to be typed required Source code in botcity/core.py def type_text ( text ): \"\"\" Emulate the typing of the given text. Args: text (str): The text to be typed \"\"\" pyautogui . typewrite ( text )","title":"type_text()"},{"location":"api/#botcity.core.typeText","text":"Emulate the typing of the given text. Parameters: Name Type Description Default text str The text to be typed required Source code in botcity/core.py def type_text ( text ): \"\"\" Emulate the typing of the given text. Args: text (str): The text to be typed \"\"\" pyautogui . typewrite ( text )","title":"typeText()"},{"location":"intro/","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the functions to build your RPA pipeline. from botcity.core import * As a demonstration of the library, let's build a simple bot together that will open Google in your browser and execute a seach. Opening the browser To open the browser you can leverage the browser function which takes as argument a URL. browser(\"https://www.google.com\") Finding and Clicking into the Text Field For that we will need a resource or iamge file so that the bot can properly find the element on the screen.","title":"Getting Started"},{"location":"intro/#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the functions to build your RPA pipeline. from botcity.core import * As a demonstration of the library, let's build a simple bot together that will open Google in your browser and execute a seach.","title":"Getting Started"},{"location":"intro/#opening-the-browser","text":"To open the browser you can leverage the browser function which takes as argument a URL. browser(\"https://www.google.com\")","title":"Opening the browser"},{"location":"intro/#finding-and-clicking-into-the-text-field","text":"For that we will need a resource or iamge file so that the bot can properly find the element on the screen.","title":"Finding and Clicking into the Text Field"}]}